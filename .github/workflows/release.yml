name: Release - Alpha Mask Toolkit

on:
  push:
    tags:
      - 'v*.*.*'  # Semantic versioning tags (v1.0.0, v2.1.3, etc.)

env:
  REGISTRY: docker.io
  IMAGE_NAME: alpha-mask-toolkit

jobs:
  # Build and release
  release:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for changelog

    - name: üîç Validate tag format
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        if [[ ! $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "‚ùå Invalid tag format: $TAG"
          echo "Expected format: v1.0.0"
          exit 1
        fi
        echo "‚úÖ Valid tag format: $TAG"
        echo "TAG=$TAG" >> $GITHUB_ENV

    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üîê Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: üìã Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          # Semantic version tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          # Latest for non-prerelease
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=Alpha Mask Toolkit
          org.opencontainers.image.description=AI-powered alpha mask generation using BiRefNet
          org.opencontainers.image.vendor=${{ github.repository_owner }}
          org.opencontainers.image.version=${{ env.TAG }}

    - name: üèóÔ∏è Build and push release image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: üìù Generate release notes
      id: release_notes
      run: |
        # Get previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

        # Generate changelog
        if [ -z "$PREV_TAG" ]; then
          COMMITS=$(git log --oneline --pretty=format:"- %s (%h)" | head -20)
          COMPARE_URL=""
        else
          COMMITS=$(git log ${PREV_TAG}..HEAD --oneline --pretty=format:"- %s (%h)")
          COMPARE_URL="**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...${{ env.TAG }}"
        fi

        # Check for breaking changes
        BREAKING_CHANGES=""
        if git log ${PREV_TAG}..HEAD --grep="BREAKING CHANGE" --oneline | grep -q .; then
          BREAKING_CHANGES="## ‚ö†Ô∏è BREAKING CHANGES
        $(git log ${PREV_TAG}..HEAD --grep="BREAKING CHANGE" --pretty=format:"- %s")

        "
        fi

        # Create release notes
        RELEASE_NOTES="${BREAKING_CHANGES}## üöÄ What's New in ${{ env.TAG }}

        ### üîÑ Changes:
        $COMMITS

        ### üê≥ Docker Images:
        \`\`\`bash
        # Pull the latest release
        docker pull ${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}

        # Run alpha mask generation
        docker run --gpus all \\
          -v ./input:/app/input \\
          ${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}
        \`\`\`

        ### üì¶ Available Tags:
        - \`${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}\` - This specific version
        - \`${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest\` - Latest stable release

        ### üîß Requirements:
        - **GPU**: NVIDIA GPU with CUDA support (recommended for best performance)
        - **Runtime**: Docker with NVIDIA Container Runtime
        - **Input**: Images in folders ending with \`_converted\`

        ### üìö Documentation:
        - [Docker Usage Guide](README_DOCKER.md)
        - [Alpha Mask Creation Guide](README_ALPHA_MASKS.md)

        $COMPARE_URL"

        # Save to environment
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
        echo "$RELEASE_NOTES" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: üè∑Ô∏è Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.TAG }}
        release_name: Alpha Mask Toolkit ${{ env.TAG }}
        body: ${{ env.RELEASE_NOTES }}
        draft: false
        prerelease: ${{ contains(env.TAG, '-') }}

    - name: üìä Post-release summary
      run: |
        echo "## üéâ Release ${{ env.TAG }} Published!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üì¶ Docker Images:" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîó Links:" >> $GITHUB_STEP_SUMMARY
        echo "- [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/${{ env.TAG }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Docker Hub](https://hub.docker.com/r/${{ github.repository_owner }}/${{ env.IMAGE_NAME }})" >> $GITHUB_STEP_SUMMARY
name: CD - Deploy Alpha Mask Toolkit

on:
  workflow_run:
    workflows: ["CI - Alpha Mask Toolkit"]
    types: [completed]
    branches: [main]

  # Manual deployment trigger
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  REGISTRY: docker.io
  IMAGE_NAME: alpha-mask-toolkit

jobs:
  # Only deploy if CI passed
  check-ci:
    runs-on: ubuntu-latest
    outputs:
      deploy: ${{ steps.check.outputs.deploy }}
    steps:
    - name: 🔍 Check CI status
      id: check
      run: |
        if [ "${{ github.event.workflow_run.conclusion }}" = "success" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "deploy=true" >> $GITHUB_OUTPUT
          echo "✅ CI passed, proceeding with deployment"
        else
          echo "deploy=false" >> $GITHUB_OUTPUT
          echo "❌ CI failed, skipping deployment"
        fi

  # Build and deploy Docker image
  deploy:
    runs-on: ubuntu-latest
    needs: check-ci
    if: needs.check-ci.outputs.deploy == 'true'
    timeout-minutes: 60

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 📋 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          # Latest tag for main branch
          type=raw,value=latest,enable={{is_default_branch}}
          # Branch name
          type=ref,event=branch
          # Git short commit SHA
          type=sha,prefix={{branch}}-,format=short
          # Manual tag input
          type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}
        labels: |
          org.opencontainers.image.title=Alpha Mask Toolkit
          org.opencontainers.image.description=AI-powered alpha mask generation using BiRefNet
          org.opencontainers.image.vendor=${{ github.repository_owner }}

    - name: 🧹 Free up disk space for build
      run: |
        echo "Initial disk usage:"
        df -h

        # Remove unnecessary software
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo apt-get remove -y '^aspnetcore-.*' '^dotnet-.*' '^llvm-.*' '^postgresql-.*' '^mysql-.*'
        sudo apt-get autoremove -y
        sudo apt-get autoclean
        docker system prune -af

        echo "Disk usage after cleanup:"
        df -h

    - name: 🏗️ Build and push Docker image (minimal version)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.minimal
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 📊 Display deployment info
      run: |
        echo "## 🚀 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Published Images:" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Usage:" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "# Pull the minimal image (model downloads on first run)" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "docker run --gpus all -v ./input:/app/input ${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Note**: This is a minimal build. BiRefNet model (~844MB) downloads automatically on first run." >> $GITHUB_STEP_SUMMARY

  # Create GitHub release for manual deployments
  release:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'workflow_dispatch'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Get full history for changelog

    - name: 📝 Generate changelog
      id: changelog
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          COMMITS=$(git log --oneline --pretty=format:"- %s (%h)" | head -20)
        else
          COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --pretty=format:"- %s (%h)")
        fi

        # Create changelog
        CHANGELOG="## 🚀 What's Changed

        ### 🔄 Recent Commits:
        $COMMITS

        ### 🐳 Docker Usage:
        \`\`\`bash
        docker pull ${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.tag }}
        docker run --gpus all -v ./input:/app/input ${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.tag }}
        \`\`\`

        ### 📋 Requirements:
        - NVIDIA GPU with CUDA support (recommended)
        - Docker with NVIDIA runtime
        - Input images in folders ending with '_converted'

        **Full Changelog**: https://github.com/${{ github.repository }}/compare/${LAST_TAG}...${{ github.event.inputs.tag }}"

        # Save to file and output
        echo "$CHANGELOG" > changelog.md
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: 🏷️ Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.tag }}
        release_name: Alpha Mask Toolkit ${{ github.event.inputs.tag }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false

  # Cleanup old images (keep last 10)
  cleanup:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 🧹 Cleanup old Docker images
      run: |
        echo "ℹ️ Old image cleanup would run here"
        echo "This could use Docker Hub API to delete old tags"
        echo "Implementation depends on your retention policy"
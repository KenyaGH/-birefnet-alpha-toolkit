name: CI - Alpha Mask Toolkit

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: alpha-mask-toolkit

jobs:
  # Job 1: Quick code quality checks
  code-quality:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 🔧 Install basic dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort

    - name: 🧹 Check code formatting
      run: |
        echo "Checking Python code formatting..."
        black --check --diff . || echo "⚠️ Code formatting issues found (run 'black .' to fix)"

    - name: 📏 Check import sorting
      run: |
        echo "Checking import organization..."
        isort --check-only --diff . || echo "⚠️ Import sorting issues found (run 'isort .' to fix)"

    - name: 🔍 Lint code
      run: |
        echo "Linting Python code..."
        # Critical errors only (syntax errors, undefined names)
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # All issues as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  # Job 2: Test Python scripts
  test-scripts:
    runs-on: ubuntu-latest
    needs: code-quality
    timeout-minutes: 15

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install core dependencies for testing (not full requirements.txt)
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
        pip install Pillow numpy tqdm

    - name: 🧪 Test script imports
      run: |
        echo "Testing Python script imports..."
        python -c "
        import sys
        import os
        import numpy as np
        from PIL import Image
        import torch
        from tqdm import tqdm
        from pathlib import Path
        print('✅ Core imports successful')
        print(f'✅ Python version: {sys.version}')
        print(f'✅ PyTorch version: {torch.__version__}')
        print(f'✅ CUDA available: {torch.cuda.is_available()}')
        "

    - name: 🔬 Test script syntax
      run: |
        echo "Checking script syntax..."
        python -m py_compile birefnet_direct_alpha.py
        python -m py_compile create_alpha_masks.py
        python -m py_compile docker_entrypoint.py
        echo "✅ All scripts have valid syntax"

  # Job 3: Validate Dockerfile syntax (skip full build due to size constraints)
  docker-validate:
    runs-on: ubuntu-latest
    needs: [code-quality, test-scripts]
    timeout-minutes: 10

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔍 Validate Dockerfile syntax
      run: |
        echo "Validating Dockerfile syntax..."
        # Use dockerfile syntax checker
        docker run --rm -i hadolint/hadolint < Dockerfile || echo "Hadolint completed with warnings"

        # Basic syntax validation - parse Dockerfile
        python3 -c "
        with open('Dockerfile', 'r') as f:
            lines = f.readlines()

        from_found = False
        for i, line in enumerate(lines, 1):
            line = line.strip()
            if not line or line.startswith('#'):
                continue
            if line.startswith('FROM'):
                from_found = True
                break

        if not from_found:
            raise ValueError('No FROM instruction found in Dockerfile')

        print('✅ Dockerfile syntax appears valid')
        print(f'✅ Found FROM instruction')
        "
        echo "✅ Dockerfile validation completed"

    - name: 📋 Dockerfile analysis
      run: |
        echo "📋 Dockerfile Analysis:"
        echo "Base image: $(grep '^FROM' Dockerfile)"
        echo "Python scripts copied: $(grep 'COPY.*\.py' Dockerfile || echo 'None specified')"
        echo "Entry point: $(grep '^CMD' Dockerfile)"
        echo ""
        echo "Note: Full Docker build skipped in CI due to size constraints."
        echo "Docker build will happen in CD pipeline with more resources."

  # Job 4: Security scanning
  security:
    runs-on: ubuntu-latest
    needs: docker-validate
    timeout-minutes: 10

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔒 Run Trivy security scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '0'  # Don't fail on vulnerabilities (just report)

  # Job 5: Generate test report
  report:
    runs-on: ubuntu-latest
    needs: [code-quality, test-scripts, docker-validate, security]
    if: always()

    steps:
    - name: 📊 Generate CI Report
      run: |
        echo "## 📋 CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Completed Jobs:" >> $GITHUB_STEP_SUMMARY
        echo "- Code Quality Check" >> $GITHUB_STEP_SUMMARY
        echo "- Python Script Testing" >> $GITHUB_STEP_SUMMARY
        echo "- Docker Validation (full build in CD)" >> $GITHUB_STEP_SUMMARY
        echo "- Security Scanning" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Next Steps:" >> $GITHUB_STEP_SUMMARY
        if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "- 🔄 CD pipeline will deploy to Docker Hub" >> $GITHUB_STEP_SUMMARY
        else
          echo "- 🔀 Merge to main branch to trigger deployment" >> $GITHUB_STEP_SUMMARY
        fi